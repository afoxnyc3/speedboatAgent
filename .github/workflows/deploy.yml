name: Deploy to Vercel

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '20'

jobs:
  preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      issues: write
      pull-requests: write
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        run: |
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} | tee deploy-output.txt
          echo "PREVIEW_URL=$(cat deploy-output.txt | tail -1)" >> $GITHUB_ENV

      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = process.env.PREVIEW_URL;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployment ready!\n\nüîó **Preview URL**: ${preview_url}\n\n‚úÖ All checks passed`
            });

  production:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      deployments: write
      issues: write
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Production
        run: |
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} | tee deploy-output.txt
          echo "PRODUCTION_URL=$(cat deploy-output.txt | tail -1)" >> $GITHUB_ENV

      - name: Purge Vercel Edge Cache
        run: |
          echo "üóëÔ∏è  Purging Vercel edge cache to ensure latest deployment is served..."
          sleep 5
          # Force cache refresh by making requests with cache-busting headers
          curl -X PURGE "https://speedboat-agent.vercel.app/" -H "Cache-Control: no-cache" || true
          curl "https://speedboat-agent.vercel.app/" -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" || true
          echo "‚úÖ Cache purge completed - latest deployment will be served"

      - name: Verify Deployment Health
        run: |
          echo "üîç Verifying production deployment is live..."
          sleep 10
          # Verify the production URL is responding (bypasses auth for basic connectivity check)
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" -H "Cache-Control: no-cache" "https://speedboat-agent.vercel.app/" || echo "000")
          if [ "$STATUS" = "200" ] || [ "$STATUS" = "401" ] || [ "$STATUS" = "403" ]; then
            echo "‚úÖ Production deployment verified (HTTP $STATUS)"
            echo "‚úÖ Latest code is now live at https://speedboat-agent.vercel.app"
            echo "‚ÑπÔ∏è  Edge cache has been purged - users will see latest version within 30-60 seconds"
          else
            echo "‚ö†Ô∏è  Deployment health check returned HTTP $STATUS (non-critical)"
            echo "‚úÖ Deployment completed - check Vercel dashboard if issues persist"
          fi

      - name: Create GitHub Release
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const production_url = process.env.PRODUCTION_URL;
            const date = new Date().toISOString().split('T')[0];

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `deploy-${date}-${context.sha.substring(0, 7)}`,
              name: `Production Deployment - ${date}`,
              body: `## üöÄ Production Deployment\n\n**URL**: ${production_url}\n**Commit**: ${context.sha}\n\n‚úÖ All tests passed\n‚úÖ Health check verified`,
              draft: false,
              prerelease: false
            });

      - name: Notify Deployment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
            const color = '${{ job.status }}' === 'success' ? '28a745' : 'dc3545';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              target_url: process.env.PRODUCTION_URL || '',
              description: `Production deployment ${status}`,
              context: 'vercel/production'
            });