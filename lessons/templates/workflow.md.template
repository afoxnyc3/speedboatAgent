# Development Workflow

## Overview
This document outlines the standardized development workflow for [PROJECT_NAME], ensuring consistent practices across all development phases.

## Project Structure

### Branch Strategy
```
main (protected)
├── feature/#<issue>-<description>
├── fix/#<issue>-<description>
└── chore/<description>
```

### Issue-Driven Development
All development work is tracked via GitHub issues with priority-based organization:
- **P0 (Critical)**: Production blockers, security issues
- **P1 (High)**: Core features, major bugs
- **P2 (Medium)**: Enhancements, optimizations
- **P3 (Low)**: Nice-to-haves, documentation

## Development Process

### 1. Issue Selection
- Pick issues from current sprint/milestone
- Start with P0 (Critical) before P1 (High)
- Check dependencies before starting work
- Use `/work` command for auto-prioritization (if available)

### 2. Branch Creation
```bash
# Create feature branch from main
git checkout main
git pull origin main
git checkout -b feature/#<issue>-<description>

# For bug fixes
git checkout -b fix/#<issue>-<description>

# For maintenance
git checkout -b chore/<description>
```

### 3. Implementation Standards

#### Code Quality Requirements
- **Functions**: Maximum [N] lines (adjust based on team standards)
- **Files**: Maximum [N] lines (adjust based on team standards)
- **[Language]**: [Specific requirements, e.g., "No 'any' types, strict mode"]
- **Validation**: [Approach, e.g., "Zod schemas for all inputs"]
- **Error Handling**: [Strategy, e.g., "Try-catch with logging"]

#### Testing Requirements
- Unit tests for all critical functions
- Integration tests for API endpoints
- [Specific test type] tests for [specific component]
- Test coverage > [N]%

#### Documentation Standards
- [Documentation type 1, e.g., "JSDoc for all public functions"]
- [Documentation type 2, e.g., "README updates for new features"]
- [Documentation type 3, e.g., "CLAUDE.md for technical changes"]
- [Documentation type 4, e.g., "progress.md for milestones"]

### 4. Development Flow

#### Daily Workflow
```bash
# 1. Update local main
git checkout main && git pull origin main

# 2. Create feature branch
git checkout -b feature/#<issue>-<description>

# 3. Implement feature with TDD
# - Write tests first
# - Implement minimum viable solution
# - Refactor for quality

# 4. Run quality checks
[test command, e.g., "npm test"]
[lint command, e.g., "npm run lint"]
[typecheck command, e.g., "npm run typecheck"]

# 5. Commit with issue reference
git commit -m "[type]: #<issue> <imperative-summary>"
```

#### Commit Message Format
```
<type>: #<issue> <imperative-summary>

<optional-body>

<optional-footer>
```

**Types**: `feat`, `fix`, `chore`, `docs`, `refactor`, `test`

### 5. Pull Request Process

#### PR Creation
```bash
# Push feature branch
git push origin feature/#<issue>-<description>

# Create PR with GitHub CLI
gh pr create --title "[type]: #<issue> <title>" \
  --body "<description>"
```

#### PR Requirements
- [ ] All tests passing
- [ ] Code review completed
- [ ] Documentation updated
- [ ] Performance benchmarks met (if applicable)
- [ ] Security review (if applicable)

#### PR Template
```markdown
## Summary
[Brief description of changes]

## Issue
Closes #<issue-number>

## Changes
- [ ] [Change 1]
- [ ] [Change 2]
- [ ] [Change 3]

## Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Manual testing completed

## Performance Impact
- [Metric 1]: [Impact]
- [Metric 2]: [Impact]
```

### 6. Code Review Guidelines

#### Review Checklist
- [ ] Code follows style guide
- [ ] Functions within size limits
- [ ] Proper error handling
- [ ] Security considerations addressed
- [ ] Performance implications considered
- [ ] Test coverage adequate
- [ ] Documentation complete

#### Review Process
1. **Author**: Create PR with complete description
2. **Reviewer**: Check code quality and functionality
3. **Testing**: Verify all tests pass
4. **Approval**: Merge to main after approval

### 7. Deployment Process

#### Pre-deployment Checklist
- [ ] All tests passing in CI
- [ ] Performance benchmarks met
- [ ] Security scan completed (if applicable)
- [ ] Documentation updated
- [ ] Rollback plan prepared

#### Deployment Steps
```bash
# 1. Merge to main
git checkout main
git pull origin main

# 2. Run production build
[build command]

# 3. Run production tests
[test command]

# 4. Deploy to staging (if applicable)
[deploy command]

# 5. Validate staging deployment
[validation command]

# 6. Deploy to production
[production deploy command]
```

## Quality Gates

### Code Quality
- [Tool 1]: No warnings/errors
- [Tool 2]: [Requirement]
- [Tool 3]: Consistent formatting
- Test coverage: > [N]%

### Performance Targets
- [Metric 1]: [Target]
- [Metric 2]: [Target]
- [Metric 3]: [Target]
- [Metric 4]: [Target]

### Security Requirements
- [Security requirement 1]
- [Security requirement 2]
- [Security requirement 3]
- [Security requirement 4]

## Monitoring & Metrics

### Development Metrics
- Issue completion rate
- PR review time
- Code review feedback
- Test coverage trends

### Production Metrics
- Response times
- Error rates
- User satisfaction
- Cost optimization

## Issue Lifecycle

### Status Tracking
1. **Ready to Implement** - Dependencies met, can start work
2. **In Progress** - Actively being developed
3. **In Review** - PR created, awaiting review
4. **Testing** - Deployed to staging for validation
5. **Complete** - Merged and deployed to production

### Progress Updates
- Update progress.md after major milestones
- Update issue status in GitHub
- Communicate blockers immediately
- Document lessons learned in decision-log.md

### GitHub Issue Closure

#### Automatic Closure (Preferred)
Issues are automatically closed when PRs are merged if the PR description contains:
```bash
Closes #<issue-number>
Fixes #<issue-number>     # For bug fixes
Resolves #<issue-number>  # For feature requests
```

#### Manual Closure with Summary
For complex issues requiring detailed implementation summaries:
```bash
gh issue close <issue-number> --comment "✅ [Issue Title] complete

Implemented:
- [Core feature/functionality]
- [Additional features/improvements]
- [Integration points/dependencies]

Technical Details:
- [Architecture decisions]
- [Performance improvements]
- [Security considerations]

Testing & Validation:
- [Test coverage details]
- [Integration test results]
- [Performance benchmarks met]

All requirements met and tests passing."
```

## Tools & Resources

### Required Tools
- Git/GitHub CLI
- [Language runtime, e.g., "Node.js 20+"]
- [IDE, e.g., "VS Code with extensions"]
- [Other tools]

### Helpful Resources
- [Link to project spec](./project-spec.md)
- [Link to technical reference](./CLAUDE.md)
- [Link to progress tracking](./progress.md)
- [Link to roadmap](./roadmap.md)

## Emergency Procedures

### Hotfix Process
1. Create hotfix branch from main
2. Implement minimal fix
3. Test thoroughly
4. Fast-track review process
5. Deploy immediately after approval
6. Backport to development branches

### Rollback Process
1. Identify problematic deployment
2. Revert to previous stable version
3. Investigate root cause
4. Create fix in separate branch
5. Re-deploy when ready

---

*Last Updated: [DATE]*
*Review Schedule: [FREQUENCY]*